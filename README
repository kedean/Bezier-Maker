----------
Kevin Dean  
Copyright 2013  
----------  
  
Python version of my Bezier demo. Keyboard and mouse controls:  
  
left mouse click - add a control point 
right mouse click - remove the closest point within n pixels, hardcoded to 5 currently
a - animate the calculations over 1 second. Button exists.
p - pause or resume animation  
s - perform an animation step, can be done without starting animation  
shift+s - reverse an animation step  
c - clear the control points. Button exists.
r - remove the last added point  
d - toggle debug mode    
] - zoom in
[ - zoom out
  
----------  
Requirements  
----------  
  
Runs and tested on Python 2.7, requires an installation of Pyglet.  
It must be run in 32-bit python due to pyglet use. On Mac OSX this requires  

    arch -i386 python main.py

where 'python' is the absolute path to your python interpreter. Just 'python' will work if using the OSX included version.

----------
Implementation Details
----------

The usage of static_calc_line_layer is now somewhat of a relic, it's only used for the animation structure. Actual regeneration has been switched over to using a more standard interpolate() function that uses binomial coefficient multiplication to calculate the curve. In tests comparing the two, I found that the interpolate method is 3 to 4 times as fast, even with 1000 ponts of calculation.

----------
Todo
----------

- detail slider instead of buttons

----------
Future
----------

- turn it into a module, maybe multiple options for drawing API
- possible 3d mode with rotation
- ability to save designs and extract the coordinates of points
- ability to have multiple curves
